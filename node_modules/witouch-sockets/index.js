var RPISessionHolder;
var io;

exports.init = function (port, expressApp){
    console.log("witoutch-sockets : port "+port);
	var server = require('http').createServer(expressApp);

	exports.io = io = require('socket.io')(server);

    io.of('feedStatus').on('connection',function(socket){
        console.log("New connection in feed status");
        console.log("clientID : "+socket.handshake.query.clientID);
        console.log(" /////////////////////////////");

        socket.join(socket.handshake.query.clientID); // one room whose ID is the client ID, where many sockets can be
    });

	io.of('status').on('connection',function(socket){
		io.of('status').emit('rpiConnectionsUpdated',RPISessionHolder.connectedClients);
	});


	io.of('rpi').on('connection', function (socket) {
		console.log("New client: "+socket.id);

		socket.on("clientIdentification",function(data){
			RPISessionHolder.add(socket.id,data.clientID);
			console.log("Client identification received for socket "+socket.id+" : "+data.clientID);
			io.of('status').emit('rpiConnectionsUpdated',RPISessionHolder.connectedClients);

		});

        socket.on("feedStatusUpdate",function(status){
            console.log("/// feedStatusUpdate ///");
            console.log(status);
            var clientID = RPISessionHolder.sessions[socket.id];
            console.log("Found client ID "+clientID);
            //var socketID = WEBSessionHolder.findSocketUsingClient(clientID);
            io.of('feedStatus').in(clientID).emit("feedStatusUpdate",status);
        })

		socket.on("disconnect",function(){
			RPISessionHolder.remove(socket.id);
			console.log("Client disconected ... ");
			io.of('status').emit('rpiConnectionsUpdated',RPISessionHolder.connectedClients);
		});
	});


	server.listen(port);
};

exports.requestFeedPublication = function(feed,clientID, callback){
	var socketID = RPISessionHolder.findSocketUsingClient(clientID);
	console.log("socket found : "+socketID + " :");
	var socket = io.sockets.connected[socketID];
	io.of('rpi').to(socketID).emit("requestFeed",{feedName:feed});
    if (callback) callback();
};


RPISessionHolder = module.exports.sessionHolder = {
    sessions: {},
    connectedClients : {},
    add: function(socketID,clientID) {
        RPISessionHolder.sessions[socketID] = clientID;
        RPISessionHolder.connectedClients[clientID] = true;
        console.log(RPISessionHolder.sessions);
    },
    remove: function(socketID) {
        RPISessionHolder.connectedClients[RPISessionHolder.sessions[socketID]] = false;
        delete RPISessionHolder.sessions[socketID];
        console.log(RPISessionHolder.sessions);       
    },
    isOnline : function(clientID){
    	var result = false;
    	Object.keys(RPISessionHolder.sessions).forEach(function(key,value) {
    		if (RPISessionHolder.sessions[key]+"" == clientID+""){
    			result =  true;
    		}
		});

    	return result;
    },
    findSocketUsingClient : function (clientID){
    	var result = false;
    	Object.keys(RPISessionHolder.sessions).forEach(function(key,value) {
    		console.log(RPISessionHolder.sessions[key]+""+" // "+clientID);
    		if (RPISessionHolder.sessions[key]+"" == clientID+""){
    			console.log("FOUND !");
    			result =  key+"";
    		}
		});
		return result;
    }
}