{
  "name": "node-rtsp-rtmp-server",
  "version": "0.3.1",
  "description": "RTSP/RTMP/HTTP hybrid server",
  "author": {
    "name": "Nao Iizuka",
    "email": "iizuka@kyu-mu.net"
  },
  "main": "server.js",
  "dependencies": {
    "ejs": "0.8.x",
    "sequent": ">= 0.1.2"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "scripts": {
    "hi": "echo 'hi'",
    "postinstall": "coffee -c ."
  },
  "gitHead": "def79292ac00c619632eb7dd9b7d778eaa5ee4e9",
  "readme": "### RTSP, RTMP, and HTTP server in Node.js\n\n- Supports RTSP, RTMP/RTMPE/RTMPT/RTMPTE, and HTTP.\n- Supports only H.264 video and AAC audio (AAC-LC, HE-AAC v1/v2).\n\n### Installation\n\n    $ git clone https://github.com/iizukanao/node-rtsp-rtmp-server.git\n    $ cd node-rtsp-rtmp-server\n    $ npm install -d\n\n### Configuration\n\nEdit config.coffee.\n\n### Starting the server\n\n    $ cd node-rtsp-rtmp-server\n    $ sudo coffee server.coffee\n\nor use Node.js directly:\n\n    $ cd node-rtsp-rtmp-server\n    $ coffee -c .\n    $ sudo node server.js\n\nIf both `serverPort` and `rtmpServerPort` are above 1023 in config.coffee, you can omit `sudo`.\n\n### Publishing streams\n\n#### From Flash Media Live Encoder\n\nFlash Media Live Encoder is a free live encoder from Adobe.\n\nIn the Encoding Options panel, check \"Stream to Flash Media Server\" and set the URL to:\n\n- **FMS URL**:  rtmp://localhost/live\n- **Backup URL**: (blank)\n- **Stream**: STREAM_NAME (whatever name you would like)\n\nPress the \"Connect\" button. Set the video format to H.264, and the audio format to AAC. Press the \"Start\" button.\n\nWhen you watch the stream over RTSP or RTMP, use the stream name specified above.\n\n#### From FFmpeg\n\nIf you have an MP4 file with H.264 video and AAC audio:\n\n    $ ffmpeg -re -i input.mp4 -c:v copy -c:a copy -f flv rtmp://localhost/live/STREAM_NAME\n\nOr if you have an MP4 file that is encoded in other audio/video format:\n\n    $ ffmpeg -re -i input.mp4 -c:v libx264 -preset fast -c:a libfdk_aac -ab 128k -ar 44100 -f flv rtmp://localhost/live/STREAM_NAME\n\nReplace `input.mp4` with live audio/video sources.\n\n#### From RTSP client\n\nYou can publish streams from RTSP client such as FFmpeg.\n\n    $ ffmpeg -re -i input.mp4 -c:v libx264 -preset fast -c:a libfdk_aac -ab 128k -ar 44100 -f rtsp rtsp://localhost:80/live/STREAM_NAME\n\nOr you can publish it over TCP instead of UDP, by specifying `-rtsp_transport tcp` option. TCP is favorable if you publish large data from FFmpeg.\n\n    $ ffmpeg -re -i input.mp4 -c:v libx264 -preset fast -c:a libfdk_aac -ab 128k -ar 44100 -f rtsp -rtsp_transport tcp rtsp://localhost:80/live/STREAM_NAME\n\n#### From GStreamer\n\nFor an MP4 file with H.264 video and AAC audio:\n\n    $ gst-launch-0.10 filesrc location=input.mp4 ! qtdemux name=demux ! \\\n        flvmux name=mux streamable=true ! queue ! \\\n        rtmpsink location='rtmp://localhost/live/STREAM_NAME' demux. ! \\\n        multiqueue name=mq ! h264parse ! mux. demux. ! mq. mq. ! aacparse ! mux.\n\nReplace `input.mp4` with live audio/video sources.\n\n### Accessing the live stream\n\n#### Via RTSP\n\nRTSP stream is for VLC media player or Android's VideoView.\n\n**RTSP URL**: rtsp://localhost:80/live/STREAM_NAME\n\nNote that the RTSP server runs on port 80 by default.\n\n#### Via RTMP\n\nRTMP stream is for Flash Player. Flowplayer and JW Player are both good free players.\n\n**RTMP URL**: rtmp://localhost/live/STREAM_NAME\n\nIf you have rtmpdump installed, you can record the video with:\n\n    $ rtmpdump -v -r rtmp://localhost/live/STREAM_NAME -o dump.flv\n",
  "readmeFilename": "README.md",
  "_id": "node-rtsp-rtmp-server@0.3.1",
  "_shasum": "7eb5e38b178851c7c21ba9e4897d24d9fd79943d",
  "_from": "../../../../../../../var/folders/4b/gftvfpqn7zqdf273t21929740000gn/T/npm-84225-7f070852/git-cache-386bff95781d/def79292ac00c619632eb7dd9b7d778eaa5ee4e9",
  "_resolved": "git+https://github.com/Dermiste/node-rtsp-rtmp-server#def79292ac00c619632eb7dd9b7d778eaa5ee4e9"
}
